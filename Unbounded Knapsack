import java.util.*;

public class Solution {
    public static int knapsackMaxProfit(int index,int w,int[] profit,int[] weight,int[][] dp){
        if(index==0){
            int t=w/weight[index];
            return t*profit[index];
        }
        if(dp[index][w]!=-1){
            return dp[index][w];
        }
        int notTake=knapsackMaxProfit(index-1,w,profit,weight,dp);
        int take=Integer.MIN_VALUE;
        if(weight[index]<=w){
            take=profit[index]+knapsackMaxProfit(index,w-weight[index],profit,weight,dp);
        }
        dp[index][w]=Math.max(take,notTake);
        return dp[index][w];
    }
    public static int unboundedKnapsack(int n, int w, int[] profit, int[] weight) {
        // Write your code here.
        int[][] dp=new int[n][w+1];
        for(int i=0;i<n;i++){
            Arrays.fill(dp[i],-1);
        }
        return knapsackMaxProfit(n-1,w,profit,weight,dp);
        
    }
}



space otimization code in pyton
def unboundedKnapsack(n, w, profit, weight):
    
    # Write Your code here.
    prev=[0]*(w+1)
    for W in range(w+1):
        prev[W]=(W//weight[0])*profit[0]
    
    for i in range(1,n):
        for W in range(w+1):
            notTake=prev[W]
            take=0
            if(weight[i]<=W):
                take=profit[i]+prev[W-weight[i]]
            prev[W]=max(take,notTake)
    return prev[w]
