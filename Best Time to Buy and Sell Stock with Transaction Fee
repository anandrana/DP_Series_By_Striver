import java.util.*;

public class Solution {
//     public static int maxProfitUtil(int fee,int[] prices,int buy,int index,int[][] dp){
//         if(index==prices.length){
//             return 0;
//         }
//         if(dp[index][buy]!=-1){
//             return dp[index][buy];
//         }
//         if(buy==1){
//             return dp[index][buy]=Math.max(
//                 -prices[index]+maxProfitUtil(fee,prices,0,index+1,dp),
//                 maxProfitUtil(fee,prices,1,index+1,dp)
//             );
//         }else{
//             return dp[index][buy]=Math.max(
//             prices[index]-fee+maxProfitUtil(fee,prices,1,index+1,dp),
//                 maxProfitUtil(fee,prices,0,index+1,dp)
//             );
//         }
//     }
	public static int maximumProfit(int n, int fee, int[] prices) {
		// Write your code here.
        
        int[][] dp=new int[n+1][2];
//         for(int i=0;i<=n;i++){
//             Arrays.fill(dp[i],-1);
//         }
        dp[n][0]=dp[n][1]=0;
        
        for(int i=n-1;i>=0;i--){
            for(int buy=0;buy<2;buy++){
                if(buy==1){
                    dp[i][buy]=Math.max(-prices[i]+dp[i+1][0],dp[i+1][1]);
                }else{
                    dp[i][buy]=Math.max(prices[i]-fee+dp[i+1][1],dp[i+1][0]);
                }
            }
        }
        return dp[0][1];
//         return maxProfitUtil(fee,prices,1,0,dp);
	}
}
