import java.util.*;

public class Solution{
    public static int knapsackUtil(int[] weight,int[] value,int index,int maxWeight,int[][] dp){

        if(index==0){
            if(weight[0]<=maxWeight){
                return value[0];
            }return 0;
        }
        if(dp[index][maxWeight]!=-1){
            return dp[index][maxWeight];
        }
        int notTake=knapsackUtil(weight,value,index-1,maxWeight,dp);
        int take=0;
        if(weight[index]<=maxWeight){
            take=value[index]+knapsackUtil(weight,value,index-1,maxWeight-weight[index],dp);
        }
        dp[index][maxWeight]=Math.max(take,notTake);
        return dp[index][maxWeight];
    }
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {

            /* Your class should be named Solution
            * Don't write main().
            * Don't read input, it is passed as function argument.
            * Change in the given tree itself.
            * No need to return or print the output.
            * Taking input and printing output is handled automatically.
            */
        int[][] dp=new int[n][maxWeight+1];
        for(int i=0;i<n;i++){
            for(int j=0;j<=maxWeight;j++){
                dp[i][j]=-1;
            }
        }
        return knapsackUtil(weight,value,n-1,maxWeight,dp);
        
    }
}
